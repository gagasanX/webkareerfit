generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  password              String
  image                 String?
  bio                   String?
  skills                String?
  education             String?
  experience            String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  role                  String                 @default("USER")
  isAdmin               Boolean                @default(false)
  isAffiliate           Boolean                @default(false)
  isClerk               Boolean                @default(false)  
  phone                 String?
  affiliateCode         String?                @unique
  affiliateType         String?                @default("individual") // NEW FIELD ADDED
  referredBy            String?
  affiliateApplications AffiliateApplication[]
  affiliateStats        AffiliateStats?
  affiliateTransactions AffiliateTransaction[]
  assessments           Assessment[]
  payments              Payment[]
  referrals             Referral[]
  
  // Assessments yang telah ditetapkan ke clerk untuk review
  assignedAssessments   Assessment[]           @relation("ClerkAssessments") 
}

model Assessment {
  id        String     @id @default(cuid())
  type      String
  tier      String     @default("basic")
  status    String     @default("pending")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  data      Json?      // Tukar dari String? ke Json? untuk PostgreSQL
  price     Float
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  payment   Payment?
  referrals Referral[]
  
  // Field baru untuk pengurusan pemprosesan manual
  assignedClerkId String?
  assignedClerk   User?    @relation("ClerkAssessments", fields: [assignedClerkId], references: [id])
  reviewNotes     String?
  reviewedAt      DateTime?
  manualProcessing Boolean  @default(false)

  @@index([assignedClerkId])
}

model Payment {
  id                    String                 @id @default(cuid())
  amount                Float
  method                String
  status                String                 @default("pending")
  gatewayPaymentId      String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  userId                String
  assessmentId          String                 @unique
  couponId              String?
  affiliateTransactions AffiliateTransaction[]
  coupon                Coupon?                @relation(fields: [couponId], references: [id])
  assessment            Assessment             @relation(fields: [assessmentId], references: [id])
  user                  User                   @relation(fields: [userId], references: [id])
}

model Coupon {
  id                 String    @id @default(cuid())
  code               String    @unique
  discountPercentage Float     @default(0)
  maxDiscount        Float?
  expiresAt          DateTime
  maxUses            Int       @default(100)
  currentUses        Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  payments           Payment[]
}

model AffiliateStats {
  id             String   @id @default(cuid())
  totalReferrals Int      @default(0)
  totalEarnings  Float    @default(0)
  totalPaid      Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
}

model AffiliateTransaction {
  id        String    @id @default(cuid())
  amount    Float
  status    String    @default("pending")
  paidAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  paymentId String
  payment   Payment   @relation(fields: [paymentId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Referral {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  affiliateId    String
  userName       String?
  email          String?
  assessmentId   String?
  assessmentType String?
  status         String
  commission     Float       @default(0)
  paidOut        Boolean     @default(false)
  assessment     Assessment? @relation(fields: [assessmentId], references: [id])
  affiliate      User        @relation(fields: [affiliateId], references: [id])

  @@index([affiliateId])
  @@index([assessmentId])
}

model SystemSetting {
  key       String   @id
  value     String
  isJson    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String   // Untuk text panjang dalam PostgreSQL, boleh guna @db.Text jika perlu
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AffiliateApplication {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  fullName    String
  email       String
  phone       String
  website     String?
  socialMedia String?
  howPromote  String   // Untuk text panjang dalam PostgreSQL, boleh guna @db.Text jika perlu
  status      String
  notes       String?  // Untuk text panjang dalam PostgreSQL, boleh guna @db.Text jika perlu
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}