generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  password              String
  image                 String?
  bio                   String?
  skills                String?
  education             String?
  experience            String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  role                  String                 @default("USER")
  isAdmin               Boolean                @default(false)
  isAffiliate           Boolean                @default(false)
  isClerk               Boolean                @default(false)
  phone                 String?
  affiliateCode         String?                @unique
  affiliateType         String?                @default("individual")
  referredBy            String?
  affiliateApplications AffiliateApplication[]
  affiliateStats        AffiliateStats?
  AffiliateTransaction  AffiliateTransaction[]
  assignedAssessments   Assessment[]           @relation("ClerkAssessments")
  assessments           Assessment[]
  payments              Payment[]
  referrals             Referral[]
}

model Assessment {
  id               String     @id @default(cuid())
  type             String
  tier             String     @default("basic")
  status           String     @default("pending")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  data             Json?
  price            Float
  userId           String
  assignedClerkId  String?
  reviewNotes      String?
  reviewedAt       DateTime?
  manualProcessing Boolean    @default(false)
  assignedClerk    User?      @relation("ClerkAssessments", fields: [assignedClerkId], references: [id])
  user             User       @relation(fields: [userId], references: [id])
  payment          Payment?
  referrals        Referral[]

  @@index([assignedClerkId])
}

model Payment {
  id                   String                 @id @default(cuid())
  amount               Float
  method               String
  status               String                 @default("pending")
  gatewayPaymentId     String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  userId               String
  assessmentId         String                 @unique
  couponId             String?
  AffiliateTransaction AffiliateTransaction[]
  assessment           Assessment             @relation(fields: [assessmentId], references: [id])
  coupon               Coupon?                @relation(fields: [couponId], references: [id])
  user                 User                   @relation(fields: [userId], references: [id])
}

model Coupon {
  id                 String    @id @default(cuid())
  code               String    @unique
  discountPercentage Float     @default(0)
  maxDiscount        Float?
  expiresAt          DateTime
  maxUses            Int       @default(100)
  currentUses        Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  payments           Payment[]
}

model AffiliateStats {
  id             String   @id @default(cuid())
  totalReferrals Int      @default(0)
  totalEarnings  Float    @default(0)
  totalPaid      Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
}

model Referral {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  affiliateId    String
  userName       String?
  email          String?
  assessmentId   String?
  assessmentType String?
  status         String
  commission     Float       @default(0)
  paidOut        Boolean     @default(false)
  affiliate      User        @relation(fields: [affiliateId], references: [id])
  assessment     Assessment? @relation(fields: [assessmentId], references: [id])

  @@index([affiliateId])
  @@index([assessmentId])
}

model CareerSuggestion {
  id               String  @id @default(cuid()) @db.VarChar(255)
  superpowercode   String? @db.VarChar(10)
  jobtitle         String? @db.VarChar(255)
  shortdescription String?
  level            String? @default("mid") @db.VarChar(10)
}

model FreeSuggestionSubmission {
  id             String    @id @default(cuid()) @db.VarChar(255)
  email          String?   @db.VarChar(255)
  userip         String?   @db.VarChar(255)
  createdat      DateTime? @default(now()) @db.Timestamp(6)
  usertype       String?   @db.VarChar(20)
  userinput      String?   @db.VarChar(255)
  superpowercode String?   @db.VarChar(10)
}

model SystemSetting {
  key       String   @id
  value     String
  isJson    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AffiliateApplication {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  fullName    String
  email       String
  phone       String
  website     String?
  socialMedia String?
  howPromote  String
  status      String
  notes       String?
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model AffiliateTransaction {
  id        String    @id
  amount    Float
  status    String    @default("pending")
  paidAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  userId    String
  paymentId String
  Payment   Payment   @relation(fields: [paymentId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}
