// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model with profile fields
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  image         String?
  bio           String?   // Added profile field
  skills        String?   // Added profile field
  education     String?   // Added profile field
  experience    String?   // Added profile field
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isAdmin       Boolean   @default(false)
  isAffiliate   Boolean   @default(false)
  phone         String?
  affiliateCode String?   @unique
  referredBy    String?
  
  // Relations
  assessments         Assessment[]
  affiliateStats      AffiliateStats?
  payments            Payment[]
  affiliateTransactions AffiliateTransaction[]
  
  // New relations for affiliate system
  referrals              Referral[]
  affiliateApplications  AffiliateApplication[]
}

// Updated Assessment model with package tier
model Assessment {
  id        String   @id @default(cuid())
  type      String   // fjrl, ijrl, cdrl, ccrl, ctrl, rrl, irl
  tier      String   @default("basic") // basic, standard, premium
  status    String   @default("pending") // pending, completed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  data      Json?
  price     Float    @default(0)
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  payment   Payment?
  
  // New relation for referrals
  referrals Referral[]
}

model Payment {
  id               String   @id @default(cuid())
  amount           Float
  method           String  // card, bank_transfer, etc.
  status           String   @default("pending") // pending, completed, failed
  gatewayPaymentId String?  // ID from payment gateway
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  userId            String
  user              User       @relation(fields: [userId], references: [id])
  assessmentId      String     @unique
  assessment        Assessment @relation(fields: [assessmentId], references: [id])
  couponId          String?
  coupon            Coupon?    @relation(fields: [couponId], references: [id])
  affiliateTransactions AffiliateTransaction[]
}

model Coupon {
  id                 String    @id @default(cuid())
  code               String    @unique
  discountPercentage Float     @default(0)
  maxDiscount        Float?
  expiresAt          DateTime
  // Removed fields
  // isUsed             Boolean   @default(false)
  // usedAt             DateTime?
  
  // Added new fields
  maxUses            Int       @default(100)  // Maximum number of times the coupon can be used
  currentUses        Int       @default(0)    // Current usage count
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  payments Payment[]
}

model AffiliateStats {
  id             String   @id @default(cuid())
  totalReferrals Int      @default(0)
  totalEarnings  Float    @default(0)
  totalPaid      Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
}

model AffiliateTransaction {
  id        String   @id @default(cuid())
  amount    Float
  status    String   @default("pending") // pending, paid
  paidAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  paymentId String
  payment   Payment  @relation(fields: [paymentId], references: [id])
}

// New models for affiliate system

model Referral {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Affiliate who made the referral
  affiliateId  String
  affiliate    User     @relation(fields: [affiliateId], references: [id])
  
  // Referred user details
  userName     String?
  email        String?
  
  // Assessment details
  assessmentId String?
  assessment   Assessment? @relation(fields: [assessmentId], references: [id])
  assessmentType String?
  
  // Status and financial details
  status       String   // "pending", "completed", "cancelled"
  commission   Float    @default(0)
  paidOut      Boolean  @default(false)

  @@index([affiliateId])
  @@index([assessmentId])
}

model AffiliateApplication {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // User who applied
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  // Application details
  fullName    String
  email       String
  phone       String
  website     String?
  socialMedia String?
  howPromote  String
  status      String   // "pending", "approved", "rejected"
  
  // Admin notes
  notes       String?

  @@index([userId])
}